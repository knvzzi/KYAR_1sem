1.Объектная модель документа (Document Objeсt Model) — это 
прикладной программный интерфейс для HTML- и XMLдокументов, который представляет собой иерархическое дерево 
узлов, позволяя добавлять, удалять и изменять отдельные части 
страницы.
2. Доступ к элементам для дальнейшего их изменения 
осуществляется с помощью языка программирования JavaScript, 
который является объектно-ориентированным и используется для 
создания сценариев динамического взаимодействия с вебстраницами.
<script>: <script src="scriptFile.js">
Внешнее или внутреннее подключение
3.childNodes - дает список всех непосредственных дочерних элементов родителя (коллекция). Вместе с тегами и текстовыми узлами. Все узлы
4.событий (events), которые сигнализируют, что в документе 
или окне браузера что-то произошло. Например, когда пользователь нажимает клавишу на клавиатуре, перемещает указатель мыши, щелкает кнопкой мыши или касается сенсорного экрана, веббраузер генерирует событие. 
События соответствуют определенным действиям, которые 
выполняет пользователь. Функция, выполняемая в ответ на событие, называется обработчиком события или слушателем события.
5.Функция, выполняемая в ответ на событие, называется обработчиком события или слушателем события. 
Эти функции регистрируются с помощью метода 
addEventListener(), который принимает имя обрабатываемого события, функцию-обработчик и логическое значение, указывающее 
нужно ли вызывать событие при перехвате или всплытии. 
6.Кроме метода addEventListener(), добавив к имени события 
приставку «on» и получив тем самым обработчик события, его 
можно указать для конкретного элемента в качестве атрибута (<input onclick="myFunction();">) или в виде метода объекта 
(document.body.onclick="MyFunction()").
7. Все формы на странице содержатся в коллекции forms. 
8.Элементы формы содержатся в коллекции elements. Элементы хранятся в коллекции в том порядке, в котором они расположены в разметке, и индексируются по позиции и имени
9. Свойство innerHTML представляет собой содержимое элемента (элементы-потомки, комментарии, текст и т.д.), которое хранится в нём в виде строки. Свойство доступно для чтения и записи, поэтому у нас есть возможность получать и изменять содержимое элемента.
10.getElementById() и getElementsByTagName(). Метод getElementById()
querySelector() и 
querySelectorAll().
11.С помощью свойства selected можно узнать, какие элементы 
списка выбраны. Чтобы получить все выбранные элементы, можно перебрать набор элементов в цикле, проверяя их свойство selected
Методом checkValidity() можно проверить допустимо ли значение конкретного поля формы. Он доступен для всех элементов и 
возвращает true или false.
12.смотр. таблицу